---

- name: create downloads and resources directories
  file: path="{{ item }}" state=directory mode=0755
  with_items:
  - "{{ downloads_dir }}"
  - "{{ resources_dir }}"
  - "{{ resources_dir }}/bin"

- name: create packages.yml
  template: src=packages.yml.j2 dest={{ playbook_dir }}/conf/packages.yml

- include_vars: file={{ playbook_dir }}/conf/packages.yml

# preflight checks
- name: detect outbound network
  shell: >
    warn=no
    curl -s --connect-timeout 10 baidu.com 2>/dev/null >/dev/null; echo $?
  changed_when: false
  register: outbound_network_st

- name: set outbound network fact
  set_fact: has_outbound_network={{ outbound_network_st.stdout.strip() == '0' }}

# do actual downloading
- name: download other binary
  get_url: url={{ item.url }} dest={{ downloads_dir }}/{{ item.name }}-{{ item.version }}.tar.gz validate_certs=no
  with_items: "{{ third_party_packages }}"
  when: has_outbound_network

- name: unarchive third party binary
  shell: ls -1 {{ item.name }}-{{ item.version }}.tar.gz | xargs -n1 tar xzf
  args:
    chdir: "{{ downloads_dir }}"
    warn: no
  with_items: "{{ third_party_packages }}"

- name: cp fio binary
  shell: >
    cp -v {{ downloads_dir }}/fio-*/{{ item }} "{{ resources_dir }}/bin/"
  with_items:
    - fio

- name: clean up download dir
  shell: >
    cd "{{ downloads_dir }}" && find . -mindepth 1 -maxdepth 1 -type d -exec rm -rf {} \;

- include: docker_tasks.yml
